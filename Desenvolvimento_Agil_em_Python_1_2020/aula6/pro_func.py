# -*- coding: utf-8 -*-
"""pro_func.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IKFukueMjyffUeKBnU65MOeAnQZVmmeH

<h1><b>Programação Funcional</b></h1>

É uma paradigma onde o programa é visto como uma sequencia de funções matemáticas.

As funções que iremos conhecer são:
- zip(): (já vimos)
- lambda()
- filter()
- reduce()
- map()



---

**Função lambda (Bônus)**
<br>
É uma função anônima, de uma linha e atribuida a uma variável.


```
var = lambda <lista de variaveis> : <expressao>
var = lambda <lista de variaveis> : <expressao> if <condicao> else <expressao2>
soma = lambda numero1, numero2: numero1 + numero2
```
"""



"""**Mapeamento**
<br>
A função map() consiste em aplicar uma função a todos os itêns da lista e gera uma lista nova contendo todos os resultados.

```
lista_resultado = map( funcao  , lista)
lista_resultado = list(lista_resultado)
```
A função pode ser uma função def ou lambda, deve ter somente uma variável como parametro.<br>
A Lista deve ser uma lista simples e com só um tipo de variável.
"""



"""**Filtragem**<br>
A função filtragem pega os elemetos de uma lista, passa por uma função de filtragem e retorna uma lista com os elementos desejados.
```
lista_resultado = filter( funcao  , lista)
lista_resultado = list(lista_resultado)
```

A função deve receber somente uma variável, fazer a comparação e retornar True para verdadeiro ou False para falso.<br>
Somente os elementos que a função retornou True vão para a lista final.
"""

from random import randint as rd
funcao = lambda x: True if x == 'f' else False
lista = ['f' if (rd(0,1)==1) else "m" for i in range(20) ]
print(lista)
print(list( filter(funcao,lista)   ))

"""**Redução**<br>
Redução aplica uma função *(que irá receber 2 variáveis como parametros)* aplica-la na lista e retornar um só valor.
Detalhe é que ele vai pegar valor por valor e ir acumulando na função definida.


```
# É necessário fazer a importação do módulo
from functools import reduce

var = reduce( funcao, lista)

```
"""

from functools import reduce

lista = [1,1,2,2,3,3,4,10,10]

funcao = lambda x, y: x^y 
print(reduce(funcao,lista))

b = 10
c = 2
try:
    a = b/c
    #d
except:
    a="Não pode dividir por zero!"
print(a)

10/0